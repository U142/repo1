/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LogFrame2.java
 *
 * Created on Jan 27, 2011, 1:39:22 PM
 */
package no.ums.log.swing;

import java.awt.Component;
import java.awt.EventQueue;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.concurrent.atomic.AtomicReference;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import javax.swing.*;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;

import no.ums.log.Log;
import no.ums.log.UmsLog;

/**
 *
 * @author staaleu
 */
public class LogFrame extends javax.swing.JFrame {

    private static final Log log = UmsLog.getLogger(LogFrame.class);
    private static final ListDataListener DATA_LISTENER = new ListDataListener() {

        @Override
        public void intervalAdded(ListDataEvent e) {
            contentsChanged(e);
        }

        @Override
        public void intervalRemoved(ListDataEvent e) {
            // No need to do anything when items are removed.
        }

        @Override
        public void contentsChanged(ListDataEvent e) {
            for (int i=e.getIndex0(); i<=e.getIndex1(); i++) {
                // Only show the frame if hidden and we get a severe message.
                if (!Holder.INSTANCE.isVisible() && LogRecordCollector.LOG_RECORD_MODEL.is(Level.SEVERE, i)) {
                    EventQueue.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            Holder.INSTANCE.setVisible(true);
                        }
                    });
                }
            }
        }

    };

    private boolean scrollEnabled = true;

    /** Creates new form LogFrame2 */
    public LogFrame() {
        initComponents();
        jComboBox1.setRenderer(new ListCellRenderer() {

            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                Level level = (Level) value;
                JLabel label = new JLabel(level.getLocalizedName());
                label.setForeground(LogSwingUtil.toColor(level));
                return label;
            }
        });
        jList1.setCellRenderer(LogSwingUtil.LOG_RECORD_RENDERER);
        jScrollPane1.getVerticalScrollBar().addAdjustmentListener(new AdjustmentListener() {

            @Override
            public void adjustmentValueChanged(AdjustmentEvent e) {
                scrollEnabled = (e.getValue() + jScrollPane1.getHeight() - e.getAdjustable().getMaximum()) > -15;
            }
        });
        jList1.setTransferHandler(new TransferHandler() {

            @Override
            public void exportToClipboard(final JComponent comp, final Clipboard clip, final int action) throws IllegalStateException {
                if ((action == COPY || action == MOVE)) {

                    Transferable t = createTransferable(comp);
                    if (t != null) {
                        try {
                            clip.setContents(t, null);
                            exportDone(comp, t, action);
                            return;
                        } catch (IllegalStateException ise) {
                            exportDone(comp, t, NONE);
                            throw ise;
                        }
                    }
                }

                exportDone(comp, null, NONE);
            }

            @Override
            protected Transferable createTransferable(final JComponent c) {
                final StringWriter sw = new StringWriter();
                writeSelected(new PrintWriter(sw));
                return new StringSelection(sw.toString());
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        closeButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        filterLabel = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        logRecordDetail1 = new no.ums.log.swing.LogRecordDetail();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSplitPane1.setDividerLocation(400);
        jSplitPane1.setResizeWeight(1.0);

        jList1.setModel(LogRecordCollector.LOG_RECORD_MODEL);
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jList1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jList1ComponentResized(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        filterLabel.setText("Filter:");

        jComboBox1.setModel(LogSwingUtil.LEVEL_MODEL);
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filterLabel)
                .addGap(18, 18, 18)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 181, Short.MAX_VALUE)
                .addComponent(saveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(closeButton)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton)
                    .addComponent(saveButton)
                    .addComponent(filterLabel)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(jPanel2);
        jSplitPane1.setRightComponent(logRecordDetail1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 763, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.setSelectedFile(new File("UmsLog-"+LogSwingUtil.formatDateTime(System.currentTimeMillis())+".txt"));
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                final PrintWriter writer = new PrintWriter(fileChooser.getSelectedFile());
                writeSelected(writer);
                writer.close();
            } catch (FileNotFoundException e) {
                log.error("Failed to save to file %s", fileChooser.getSelectedFile(), e);
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void writeSelected(final PrintWriter writer) {
        for (final Object o : jList1.getSelectedValues()) {
            final LogRecord logRecord = (LogRecord) o;
            writer.printf("%tF %tT [%-7s] (%s) %s\n", logRecord.getMillis(), logRecord.getMillis(), logRecord.getLevel().getName(), logRecord.getLoggerName(), logRecord.getMessage());
            //noinspection ThrowableResultOfMethodCallIgnored
            if (logRecord.getThrown() != null) {
                //noinspection ThrowableResultOfMethodCallIgnored
                logRecord.getThrown().printStackTrace(writer);
            }
        }
    }

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        logRecordDetail1.setLogRecord((LogRecord) jList1.getSelectedValue());
    }//GEN-LAST:event_jList1ValueChanged

    private void jList1ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jList1ComponentResized
        if (scrollEnabled) {
            jScrollPane1.getVerticalScrollBar().setValue(jScrollPane1.getVerticalScrollBar().getMaximum());
        }
    }//GEN-LAST:event_jList1ComponentResized

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        LogRecordCollector.LOG_RECORD_MODEL.setLevel((Level) jComboBox1.getSelectedItem());
    }//GEN-LAST:event_jComboBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        LogRecordCollector.install();
        UmsLog.getLogger(LogFrame.class).debug("A Test message", new Exception("Test exception"));
        UmsLog.getLogger(LogFrame.class).debug("A Test message", new Exception("Test exception"));
        UmsLog.getLogger(LogFrame.class).debug("A Test message", new Exception("Test exception"));
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                final LogFrame logFrame2 = new LogFrame();
                logFrame2.setVisible(true);
            }
        });
    }

    /**
     * Static lazy initialization off a single LogFrame.
     *
     * @see <a href="http://blog.crazybob.org/2007/01/lazy-loading-singletons.html">blog.crazybob.org/2007/01/lazy-loading-singletons.html</a>
     * @author staaleu
     */
    static class Holder {

        static LogFrame INSTANCE = new LogFrame();
    }

    public static void install() {
        LogRecordCollector.LOG_RECORD_MODEL.addListDataListener(DATA_LISTENER);
    }

    public static void remove() {
        LogRecordCollector.LOG_RECORD_MODEL.removeListDataListener(DATA_LISTENER);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel filterLabel;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private no.ums.log.swing.LogRecordDetail logRecordDetail1;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
